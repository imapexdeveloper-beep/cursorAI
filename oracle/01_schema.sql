-- Schema for Task Management with 2-step approvals
-- Safe to run multiple times (uses conditional objects where possible)

prompt Creating types and tables...

-- Users are managed in this model table and mapped to APEX users
create table users (
  user_id        number generated by default as identity primary key,
  username       varchar2(100) not null unique,
  full_name      varchar2(200) not null,
  email          varchar2(320),
  role_code      varchar2(20) not null check (role_code in ('PM','TL','TM','SENIOR')),
  team_id        number,
  is_active      number(1) default 1 not null,
  created_at     timestamp default systimestamp not null
);

create table teams (
  team_id        number generated by default as identity primary key,
  team_name      varchar2(100) not null unique,
  leader_user_id number,
  created_at     timestamp default systimestamp not null
);

alter table users add constraint users_team_fk foreign key (team_id) references teams(team_id);
alter table teams add constraint teams_leader_fk foreign key (leader_user_id) references users(user_id);

-- Tasks owned by a TL and executed by a TM
create table tasks (
  task_id        number generated by default as identity primary key,
  title          varchar2(200) not null,
  description    clob,
  status_code    varchar2(30) default 'NEW' not null,
  created_by     number not null references users(user_id),
  created_at     timestamp default systimestamp not null,
  assigned_tl_id number not null references users(user_id),
  assigned_tm_id number references users(user_id),
  updated_at     timestamp,
  updated_by     number,
  constraint tasks_status_ck check (status_code in (
    'NEW','IN_PROGRESS','READY_FOR_REVIEW','PENDING','APPROVED','REJECTED','CANCELLED'
  ))
);

-- Each approval step record
create table task_approvals (
  approval_id    number generated by default as identity primary key,
  task_id        number not null references tasks(task_id) on delete cascade,
  step_no        number(1) not null check (step_no in (1,2)), -- 1=TL, 2=Senior
  approver_id    number not null references users(user_id),
  decision       varchar2(20) check (decision in ('APPROVE','REJECT')),
  decision_at    timestamp,
  comments       varchar2(1000),
  unique (task_id, step_no)
);

-- Comments/activity log
create table task_comments (
  comment_id     number generated by default as identity primary key,
  task_id        number not null references tasks(task_id) on delete cascade,
  author_id      number not null references users(user_id),
  body           varchar2(2000) not null,
  created_at     timestamp default systimestamp not null
);

-- Lightweight notifications table for APEX lists or emails
create table notifications (
  notification_id number generated by default as identity primary key,
  user_id         number not null references users(user_id),
  task_id         number references tasks(task_id) on delete cascade,
  title           varchar2(300) not null,
  body            varchar2(2000),
  is_read         number(1) default 0 not null,
  created_at      timestamp default systimestamp not null
);

create index notif_user_idx on notifications(user_id, is_read);
create index tasks_status_idx on tasks(status_code);
create index tasks_tl_idx on tasks(assigned_tl_id);
create index tasks_tm_idx on tasks(assigned_tm_id);

prompt Creating helper views...

create or replace view v_users as
select u.user_id, u.username, u.full_name, u.email, u.role_code, u.team_id, t.team_name
from users u left join teams t on t.team_id = u.team_id
where u.is_active = 1;

create or replace view v_tasks as
select t.task_id,
       t.title,
       t.description,
       t.status_code,
       t.created_at,
       t.created_by,
       cb.full_name as created_by_name,
       t.assigned_tl_id,
       tl.full_name as assigned_tl_name,
       t.assigned_tm_id,
       tm.full_name as assigned_tm_name
from tasks t
join users cb on cb.user_id = t.created_by
join users tl on tl.user_id = t.assigned_tl_id
left join users tm on tm.user_id = t.assigned_tm_id;

prompt Creating sequences and grants if needed...
-- Using identity columns; no extra sequences required.

prompt Done schema.
