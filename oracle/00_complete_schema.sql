-- COMPLETE INSTALL: schema, seed data, security helpers, workflow package
set define off
prompt === Creating core tables ===

-- Users table
create table users (
  user_id        number generated by default as identity primary key,
  username       varchar2(100) not null unique,
  full_name      varchar2(200) not null,
  email          varchar2(320),
  role_code      varchar2(20) not null check (role_code in ('PM','TL','TM','SENIOR')),
  team_id        number,
  is_active      number(1) default 1 not null,
  created_at     timestamp default systimestamp not null
);

-- Teams table
create table teams (
  team_id        number generated by default as identity primary key,
  team_name      varchar2(100) not null unique,
  leader_user_id number,
  created_at     timestamp default systimestamp not null
);

alter table users add constraint users_team_fk foreign key (team_id) references teams(team_id);
alter table teams add constraint teams_leader_fk foreign key (leader_user_id) references users(user_id);

-- Tasks table
create table tasks (
  task_id        number generated by default as identity primary key,
  title          varchar2(200) not null,
  description    clob,
  status_code    varchar2(30) default 'NEW' not null,
  created_by     number not null references users(user_id),
  created_at     timestamp default systimestamp not null,
  assigned_tl_id number not null references users(user_id),
  assigned_tm_id number references users(user_id),
  updated_at     timestamp,
  updated_by     number,
  constraint tasks_status_ck check (status_code in ('NEW','IN_PROGRESS','READY_FOR_REVIEW','PENDING','APPROVED','REJECTED','CANCELLED'))
);

-- Approvals
create table task_approvals (
  approval_id    number generated by default as identity primary key,
  task_id        number not null references tasks(task_id) on delete cascade,
  step_no        number(1) not null check (step_no in (1,2)),
  approver_id    number not null references users(user_id),
  decision       varchar2(20) check (decision in ('APPROVE','REJECT')),
  decision_at    timestamp,
  comments       varchar2(1000),
  unique (task_id, step_no)
);

-- Comments
create table task_comments (
  comment_id     number generated by default as identity primary key,
  task_id        number not null references tasks(task_id) on delete cascade,
  author_id      number not null references users(user_id),
  body           varchar2(2000) not null,
  created_at     timestamp default systimestamp not null
);

-- Notifications
create table notifications (
  notification_id number generated by default as identity primary key,
  user_id         number not null references users(user_id),
  task_id         number references tasks(task_id) on delete cascade,
  title           varchar2(300) not null,
  body            varchar2(2000),
  is_read         number(1) default 0 not null,
  created_at      timestamp default systimestamp not null
);

create index notif_user_idx on notifications(user_id, is_read);
create index tasks_status_idx on tasks(status_code);
create index tasks_tl_idx on tasks(assigned_tl_id);
create index tasks_tm_idx on tasks(assigned_tm_id);

prompt === Helper views ===
create or replace view v_users as
select u.user_id, u.username, u.full_name, u.email, u.role_code, u.team_id, t.team_name
from users u left join teams t on t.team_id = u.team_id
where u.is_active = 1;

create or replace view v_tasks as
select t.task_id,
       t.title,
       t.description,
       t.status_code,
       t.created_at,
       t.created_by,
       cb.full_name as created_by_name,
       t.assigned_tl_id,
       tl.full_name as assigned_tl_name,
       t.assigned_tm_id,
       tm.full_name as assigned_tm_name
from tasks t
join users cb on cb.user_id = t.created_by
join users tl on tl.user_id = t.assigned_tl_id
left join users tm on tm.user_id = t.assigned_tm_id;

prompt === Seed data ===
insert into teams (team_name) select 'Team '||level from dual connect by level <= 6;

insert into users (username, full_name, email, role_code)
values ('PM1', 'Project Manager', 'pm@example.com', 'PM');

insert into users (username, full_name, email, role_code)
values ('SENIOR1', 'Senior Approver', 'senior@example.com', 'SENIOR');

insert into users (username, full_name, email, role_code, team_id)
select 'TL'||team_id, 'Team Leader '||team_id, 'tl'||team_id||'@example.com', 'TL', team_id
from teams order by team_id;

merge into teams t
using (select u.team_id, u.user_id from users u where u.role_code='TL') src
on (t.team_id = src.team_id)
when matched then update set t.leader_user_id = src.user_id;

insert into users (username, full_name, email, role_code, team_id)
select 'TM'||team_id||'_'||rn, 'Team Member '||team_id||'-'||rn,
       'tm'||team_id||'_'||rn||'@example.com', 'TM', team_id
from (
  select t.team_id, level rn from teams t connect by level <= 11 and prior t.team_id = t.team_id and prior sys_guid() is not null
) order by team_id, rn;

commit;

prompt === Security utility package ===
create or replace package security_util as
  function get_current_username return varchar2;
  function get_current_user_id return number;
  function has_role(p_role_code in varchar2) return boolean;
  function is_pm return boolean; function is_tl return boolean; function is_tm return boolean; function is_senior return boolean;
end security_util;
/
create or replace package body security_util as
  function get_current_username return varchar2 is
  begin
    return coalesce(apex_util.get_session_state('APP_USER'), sys_context('APEX$SESSION','APP_USER'));
  exception when others then return null; end;
  function get_current_user_id return number is v_id number; begin select user_id into v_id from users where username = get_current_username(); return v_id; exception when no_data_found then return null; end;
  function has_role(p_role_code in varchar2) return boolean is v_dummy number; begin select 1 into v_dummy from v_users where username = get_current_username() and role_code = upper(p_role_code); return true; exception when no_data_found then return false; end;
  function is_pm return boolean is begin return has_role('PM'); end; function is_tl return boolean is begin return has_role('TL'); end; function is_tm return boolean is begin return has_role('TM'); end; function is_senior return boolean is begin return has_role('SENIOR'); end;
end security_util;
/

prompt === Workflow package ===
create or replace package task_workflow as
  procedure pm_create_task(
    p_title         in tasks.title%type,
    p_description   in tasks.description%type,
    p_assigned_tl   in users.user_id%type,
    p_created_by    in users.user_id%type,
    p_task_id       out tasks.task_id%type
  );
  procedure tl_assign_member(p_task_id in tasks.task_id%type, p_assigned_tm in users.user_id%type, p_tl_user in users.user_id%type);
  procedure tm_submit_for_review(p_task_id in tasks.task_id%type, p_tm_user in users.user_id%type);
  procedure tl_review(p_task_id in tasks.task_id%type, p_tl_user in users.user_id%type, p_decision in varchar2, p_comments in varchar2 default null);
  procedure senior_review(p_task_id in tasks.task_id%type, p_senior in users.user_id%type, p_decision in varchar2, p_comments in varchar2 default null);
  procedure pm_cancel_task(p_task_id in tasks.task_id%type, p_pm_user in users.user_id%type);
  function can_user_see_task(p_task_id in number, p_user_id in number) return number;
end task_workflow;
/
create or replace package body task_workflow as
  procedure notify(p_user_id in number, p_task_id in number, p_title in varchar2, p_body in varchar2) is
  begin insert into notifications(user_id, task_id, title, body) values (p_user_id, p_task_id, p_title, p_body); end;
  function get_tl_for_task(p_task_id in number) return number is v_tl number; begin select assigned_tl_id into v_tl from tasks where task_id = p_task_id; return v_tl; exception when no_data_found then return null; end;
  procedure assert_role(p_user_id in number, p_role in varchar2) is v_count number; begin select count(*) into v_count from users where user_id = p_user_id and role_code = p_role and is_active = 1; if v_count = 0 then raise_application_error(-20001, 'User does not have role '||p_role); end if; end;
  procedure pm_create_task(p_title in tasks.title%type, p_description in tasks.description%type, p_assigned_tl in users.user_id%type, p_created_by in users.user_id%type, p_task_id out tasks.task_id%type) is
  begin assert_role(p_created_by,'PM'); assert_role(p_assigned_tl,'TL'); insert into tasks(title, description, status_code, created_by, assigned_tl_id) values (p_title, p_description, 'NEW', p_created_by, p_assigned_tl) returning task_id into p_task_id; notify(p_assigned_tl, p_task_id, 'New task assigned by PM', p_title); end;
  procedure tl_assign_member(p_task_id in tasks.task_id%type, p_assigned_tm in users.user_id%type, p_tl_user in users.user_id%type) is v_tl number; v_tl_team number; v_tm_team number; begin assert_role(p_tl_user,'TL'); assert_role(p_assigned_tm,'TM'); v_tl := get_tl_for_task(p_task_id); if v_tl is null or v_tl <> p_tl_user then raise_application_error(-20002,'Only task''s TL can assign member'); end if; select team_id into v_tl_team from users where user_id = p_tl_user; select team_id into v_tm_team from users where user_id = p_assigned_tm; if v_tl_team is null or v_tm_team is null or v_tl_team <> v_tm_team then raise_application_error(-20006,'TL can only assign a TM from the same team'); end if; update tasks set assigned_tm_id=p_assigned_tm, status_code='IN_PROGRESS', updated_at=systimestamp, updated_by=p_tl_user where task_id=p_task_id; notify(p_assigned_tm,p_task_id,'You have a new assignment','Please start work'); end;
  procedure tm_submit_for_review(p_task_id in tasks.task_id%type, p_tm_user in users.user_id%type) is v_tm number; v_tl number; v_status varchar2(30); begin assert_role(p_tm_user,'TM'); select assigned_tm_id, assigned_tl_id, status_code into v_tm, v_tl, v_status from tasks where task_id = p_task_id; if v_tm is null or v_tm <> p_tm_user then raise_application_error(-20003,'Only the assigned TM can submit'); end if; if v_status not in ('IN_PROGRESS','REJECTED') then raise_application_error(-20007,'Task must be IN_PROGRESS or REJECTED to submit'); end if; update tasks set status_code='READY_FOR_REVIEW', updated_at=systimestamp, updated_by=p_tm_user where task_id=p_task_id; notify(v_tl,p_task_id,'Task submitted for your review','Please approve or reject'); end;
  procedure record_approval(p_task_id in number, p_step in number, p_approver in number, p_decision in varchar2, p_comments in varchar2) is begin merge into task_approvals d using (select p_task_id task_id, p_step step_no from dual) s on (d.task_id = s.task_id and d.step_no = s.step_no) when matched then update set approver_id=p_approver, decision=p_decision, decision_at=systimestamp, comments=p_comments when not matched then insert (task_id, step_no, approver_id, decision, decision_at, comments) values (p_task_id, p_step, p_approver, p_decision, systimestamp, p_comments); end;
  procedure tl_review(p_task_id in tasks.task_id%type, p_tl_user in users.user_id%type, p_decision in varchar2, p_comments in varchar2 default null) is v_tl number; v_tm number; v_senior number; begin assert_role(p_tl_user,'TL'); select assigned_tl_id, assigned_tm_id into v_tl, v_tm from tasks where task_id = p_task_id; if v_tl <> p_tl_user then raise_application_error(-20004,'Only the assigned TL can review'); end if; if upper(p_decision)='APPROVE' then update tasks set status_code='PENDING', updated_at=systimestamp, updated_by=p_tl_user where task_id=p_task_id; record_approval(p_task_id,1,p_tl_user,'APPROVE',p_comments); select user_id into v_senior from users where role_code='SENIOR' and is_active=1 fetch first 1 row only; notify(v_senior,p_task_id,'Task requires senior approval','Approve or reject'); else update tasks set status_code='REJECTED', updated_at=systimestamp, updated_by=p_tl_user where task_id=p_task_id; record_approval(p_task_id,1,p_tl_user,'REJECT',p_comments); if v_tm is not null then notify(v_tm,p_task_id,'Task rejected by TL', nvl(p_comments,'Please rework and resubmit')); end if; end if; end;
  procedure senior_review(p_task_id in tasks.task_id%type, p_senior in users.user_id%type, p_decision in varchar2, p_comments in varchar2 default null) is v_tm number; v_tl number; begin assert_role(p_senior,'SENIOR'); select assigned_tm_id, assigned_tl_id into v_tm, v_tl from tasks where task_id=p_task_id; if upper(p_decision)='APPROVE' then update tasks set status_code='APPROVED', updated_at=systimestamp, updated_by=p_senior where task_id=p_task_id; record_approval(p_task_id,2,p_senior,'APPROVE',p_comments); if v_tm is not null then notify(v_tm,p_task_id,'Task fully approved','You can see APPROVED status'); end if; notify(v_tl,p_task_id,'Task fully approved','Approved by Senior'); else update tasks set status_code='REJECTED', updated_at=systimestamp, updated_by=p_senior where task_id=p_task_id; record_approval(p_task_id,2,p_senior,'REJECT',p_comments); if v_tm is not null then notify(v_tm,p_task_id,'Task rejected by Senior', nvl(p_comments,'Please rework')); end if; notify(v_tl,p_task_id,'Task rejected by Senior', nvl(p_comments,'Please review')); end if; end;
  procedure pm_cancel_task(p_task_id in tasks.task_id%type, p_pm_user in users.user_id%type) is v_creator number; begin assert_role(p_pm_user,'PM'); select created_by into v_creator from tasks where task_id=p_task_id; if v_creator <> p_pm_user then raise_application_error(-20005,'Only the creating PM can cancel'); end if; update tasks set status_code='CANCELLED', updated_at=systimestamp, updated_by=p_pm_user where task_id=p_task_id; end;
  function can_user_see_task(p_task_id in number, p_user_id in number) return number is v_cnt number; begin select count(*) into v_cnt from tasks t where t.task_id=p_task_id and (t.created_by=p_user_id or t.assigned_tl_id=p_user_id or t.assigned_tm_id=p_user_id or exists (select 1 from users u where u.user_id=p_user_id and u.role_code='SENIOR')); return case when v_cnt>0 then 1 else 0 end; end;
end task_workflow;
/

prompt === Demo task ===
declare v_pm number; v_tl number; v_tm number; v_task number; begin
  select user_id into v_pm from users where role_code='PM' fetch first 1 row only;
  select user_id into v_tl from users where role_code='TL' and team_id=1 fetch first 1 row only;
  select user_id into v_tm from users where role_code='TM' and team_id=1 fetch first 1 row only;
  task_workflow.pm_create_task('Initial Task','Demo task seeded', v_tl, v_pm, v_task);
  task_workflow.tl_assign_member(v_task, v_tm, v_tl);
end;
/

prompt === Done ===
